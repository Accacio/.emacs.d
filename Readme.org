

* interface and tweaks
** exwm
   #+BEGIN_SRC emacs-lisp
     ;     (use-package exwm
     ;         :ensure t
     ;         :config
     ;         (require 'exwm-config)
     ;         (exwm-config-default)
     ;         )
   #+END_SRC

** zerodark-theme
   #+BEGIN_SRC emacs-lisp
     (use-package zerodark-theme
         :ensure t
         :config
         (progn (zerodark-setup-modeline-format)
                ))
   #+END_SRC

** transparency
#+BEGIN_SRC emacs-lisp
;(set-frame-parameter (selected-frame) 'alpha '(85 . 50))
;(add-to-list 'default-frame-alist '(alpha . (85 . 50)))
 (defun toggle-transparency ()
   (interactive)
   (let ((alpha (frame-parameter nil 'alpha)))
     (set-frame-parameter
      nil 'alpha
      (if (eql (cond ((numberp alpha) alpha)
                     ((numberp (cdr alpha)) (cdr alpha))
                     ;; Also handle undocumented (<active> <inactive>) form.
                     ((numberp (cadr alpha)) (cadr alpha)))
               100)
          '(85 . 50) '(100 . 100)))))

#+END_SRC

** tweaks
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (setq inhibit-startup-message t)
  (global-set-key (kbd "<f5>") 'revert-buffer)
  (setq frame-title-format "%b")
  (desktop-save-mode)
  (delete-selection-mode 1)
  ;; (load-theme 'deeper-blue)
  (set-face-background 'region "azure4")
  (set-face-background 'cursor "sea green")
  (setq column-number-mode t)
  (setq ring-bell-function 'ignore)
  (global-prettify-symbols-mode t)
  ;; (global-linum-mode)
(setq truncate-lines t)
(setq auto-hscroll-mode 'current-line)
  ;; from emacswiki
  ;; (define-globalized-minor-mode global-fci-mode fci-mode (lambda () (fci-mode 1)))
  ;; (global-fci-mode 1)
  ;; from emacswiki



  (server-start)
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
  (add-to-list 'initial-frame-alist '(fullscreen . maximized))
  (autoload 'zap-up-to-char "misc"
    "Kill up to, but not including ARGth occurrence of CHAR.
          \(fn arg char)"
    'interactive)
  (global-set-key "\M-z" 'zap-up-to-char)
  (scroll-bar-mode -1)
  (setq-default truncate-lines 0)
  ;; Backup files in specific folder
  (setq
   backup-by-copying t      ; don't clobber symlinks
   backup-directory-alist
   `((".*" . ,temporary-file-directory))
   auto-save-file-name-transforms
   `((".*" ,temporary-file-directory t))
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)

  ;; store all backup and autosave files in the tmp dir
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))


  ;; scroll one line at a time (less "jumpy" than defaults)

  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time

  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling

  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse

  (setq scroll-step 1) ;; keyboard scroll one line at a time

  (mouse-avoidance-mode 'banish)


  ;; Kill terminal buffer on exti
  (add-hook 'term-exec-hook (lambda ()
                              (let* ((buff (current-buffer))
                                     (proc (get-buffer-process buff)))
                                (lexical-let ((buff buff))
                                  (set-process-sentinel proc (lambda (process event)
                                                               (if (string= event "finished\n")
                                                                   (kill-buffer buff))))))))

#+END_SRC
** linum-relative
   #+BEGIN_SRC emacs-lisp
     (use-package linum-relative
       :ensure t
       :config
       (progn
         (setq linum-relative-current-symbol "")
         (add-hook 'prog-mode-hook (lambda () (linum-relative-mode t)))
         )
       )
   #+END_SRC
** smex
  #+BEGIN_SRC emacs-lisp
(use-package smex
    :ensure t
    :config
    (progn (smex-initialize)
           ))
  #+END_SRC

** flx-ido
  #+BEGIN_SRC emacs-lisp
    (use-package flx
      :ensure t )

    (use-package flx-ido
        :ensure t
        :config
        (progn (flx-ido-mode +1)

               ))
  #+END_SRC

** beacon
  #+BEGIN_SRC emacs-lisp
    (use-package beacon
      :ensure t
      :config
      (progn (beacon-mode 1)
             (setq beacon-push-mark 35)
             (setq beacon-color "#00b4ff")
             ))
  #+END_SRC

** atomic-chrome
   [[https://chrome.google.com/webstore/detail/atomic-chrome/lhaoghhllmiaaagaffababmkdllgfcmc/related?hl%3Den][atomic-chrome installation]]
  #+BEGIN_SRC emacs-lisp
(use-package atomic-chrome
    :ensure t
    :config
    (progn (atomic-chrome-start-server)
           ))
  #+END_SRC

** hl-line-mode
#+BEGIN_SRC emacs-lisp
  ;; (global-hl-line-mode)
  ;; (set-face-background 'hl-line "#282a36")
#+END_SRC

** tabbar
#+BEGIN_SRC emacs-lisp
    (use-package tabbar
      :ensure t
      :config
      (progn
        (tabbar-mode 1)
        (defun tabbar-buffer-groups ()
          "Returns the list of group names the current buffer belongs to."
          (list
           (cond

            ;; ADD RULES TO SPLIT BUFFERS IN GROUPS HERE!
            ((string-equal "*" (substring (buffer-name) 0 1))
             "Common"
             )
            ((or (string-match "^.*tex$" (buffer-name)) (string-match "^.*bib$" (buffer-name))  )
             "Latex"
             )
            ((string-match "^.*org$" (buffer-name))
             "Org"
             )
            ((memq major-mode
                   '(c++-mode c-mode))
             "C++"
             )
            ;; if buffer is not grouped by the rules you would add above
            ;; put it in the "General" group:
            (t
             "General"
             ))))
  )


    )
#+END_SRC

** ace-window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (progn
      (with-eval-after-load 'org
    (define-key org-mode-map [(control tab)] 'ace-window))
      (global-set-key (kbd "<C-tab>") 'ace-window)
      (setq aw-keys '(?j ?k ?l ))
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreground :height 2.0 :background "sea green" :foreground "#000" ))))
       )))

#+END_SRC

** undo-tree
#+BEGIN_SRC emacs-lisp
 (use-package undo-tree
    :ensure t
    :config (global-undo-tree-mode))
#+END_SRC

** flx
   #+BEGIN_SRC emacs-lisp
     (use-package flx
         :ensure t
         )
   #+END_SRC

** nyan-mode
#+BEGIN_SRC emacs-lisp
  (use-package nyan-mode
    :ensure t
    :config
    (progn
      (nyan-mode t)
      (nyan-start-animation)
      (nyan-toggle-wavy-trail)
      (setq nyan-bar-length 10)
      (setq nyan-minimum-window-width 5)
      ))
#+END_SRC

** neotree
  #+BEGIN_SRC emacs-lisp
    (use-package neotree
        :ensure t
        :config
        (progn (global-set-key [f8] 'neotree-toggle)
               (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
               (setq split-window-preferred-function 'neotree-split-window-sensibly)
               ))
  #+END_SRC

** Shell
#+BEGIN_SRC emacs-lisp
  (global-set-key
   (kbd "C-x t")
   (lambda()(interactive)
     (if ( or (get-buffer "*ansi-term*") (get-buffer "*eshell*") )
         (rename-uniquely))
     (if (string=  window-system "w32")
         (eshell)
       (ansi-term "/bin/bash")
       )))
#+END_SRC

** smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :config
    (progn
      (smartparens-global-mode 1)
      (show-smartparens-global-mode 1)))
#+END_SRC

** volatile-highlights
#+BEGIN_SRC emacs-lisp
  (use-package volatile-highlights
    :ensure t
    :config
    (volatile-highlights-mode t))
#+END_SRC

** My commands
#+BEGIN_SRC emacs-lisp
	(define-prefix-command 'accacio-map)
	(global-set-key (kbd "<f12><f12>") 'accacio-map)

    ;;; Code:
    (defun open-file-switch-buffer-or-close (filename)
      "Opens FILENAME if it\'s closed."
	  (setq ReadmeBuffer (or
			      (get-buffer (file-name-nondirectory filename))
			      (get-buffer
			       (concat (file-name-nondirectory filename)
				       "<"
				       (file-name-nondirectory
					(substring
					 (file-name-directory
					  (expand-file-name
					   filename)) 0 -1 ))
				       ">")
			       )
			      ))
	  (setq VisitedFile  (buffer-file-name ReadmeBuffer))
	  ;; (setq myReadme "~/.emacs.d/Readme.org")

	  (if (string= VisitedFile (expand-file-name filename))
	      (if (eq (get-buffer (current-buffer)) ReadmeBuffer)
		  (kill-buffer ReadmeBuffer)
		(switch-to-buffer ReadmeBuffer)
		)
	    (find-file filename)
	    )
	  )

  (define-key accacio-map (kbd "c")
    (defun emacs-config () (interactive)
      (open-file-switch-buffer-or-close "~/.emacs.d/Readme.org")
      )
    )
  (define-key accacio-map (kbd "b")
    (defun bashrc () (interactive)
      (open-file-switch-buffer-or-close "~/dots/bash/.bashrc")
      )
    )
  (define-key accacio-map (kbd "i")
      (defun i3config () (interactive)
	(open-file-switch-buffer-or-close "~/dots/i3/.i3/config")
	)
      )
  (define-key accacio-map (kbd "t") 'toggle-transparency)
  (define-key accacio-map (kbd "g") 'guru-global-mode)
  (define-key accacio-map (kbd "o")
    (defun todos () (interactive)
      (open-file-switch-buffer-or-close "~/Dropbox/AccDoc/Org/Todo.org")
      )
    )


#+END_SRC

** guru-mode
   #+BEGIN_SRC emacs-lisp
     (use-package guru-mode
         :ensure t
         :config
         (progn ;(guru-global-mode)
                ))
   #+END_SRC

** all-the-icons
   #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons
       :ensure t
       :config
         (progn
           (unless (package-installed-p 'all-the-icons)
             (all-the-icons-install-fonts))
           ))
   #+END_SRC

** rich-minority
   #+BEGIN_SRC emacs-lisp
     (use-package rich-minority
       :ensure t
       :config
       (progn
         (rich-minority-mode 1)

         (setq rm-blacklist
               (format "^ \\(%s\\)$"
                       (mapconcat #'identity
                                  '("LR"
                                    "Irony"
                                    "company"
                                    "HelmGtags"
                                    "ARev"
                                    "Hi"
                                    "ElDoc"
                                    "Abbrev"
                                    "SP"
                                    "Fly.*"
                                    "yas.*"
                                    "Projectile.*"
                                    "Undo-Tree"
                                    "PgLn"
                                    "WK"
                                    "ivy"
                                    "VHL"
                                    ".*\(\*\).*" )
                                  "\\|")))
         ))
   #+END_SRC

** rainbow-delimiters
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
       :ensure t
       :config
       (progn
         (require 'cl-lib)
         (require 'color)
         ;; (cl-loop
         ;;  for index from 1 to rainbow-delimiters-max-face-count
         ;;  do
         ;;  (let ((face (intern (format "rainbow-delimiters-depth-%d-face" index))))
         ;;    (cl-callf color-saturate-name (face-foreground face) 30)))
         (custom-set-faces
          ;; custom-set-faces was added by Custom.
          ;; If you edit it by hand, you could mess it up, so be careful.
          ;; Your init file should contain only one such instance.
          ;; If there is more than one, they won't work right.
          '(rainbow-delimiters-depth-1-face ((t (:foreground "dark orange"))))
          '(rainbow-delimiters-depth-2-face ((t (:foreground "deep pink"))))
          '(rainbow-delimiters-depth-3-face ((t (:foreground "chartreuse"))))
          '(rainbow-delimiters-depth-4-face ((t (:foreground "deep sky blue"))))
          '(rainbow-delimiters-depth-5-face ((t (:foreground "yellow"))))
          '(rainbow-delimiters-depth-6-face ((t (:foreground "orchid"))))
          '(rainbow-delimiters-depth-7-face ((t (:foreground "spring green"))))
          '(rainbow-delimiters-depth-8-face ((t (:foreground "sienna1"))))
          '(rainbow-delimiters-depth-9-face ((t (:foreground "aquamarine"))))
          )
         (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)

         )

       )
   #+END_SRC
** origami
   #+BEGIN_SRC emacs-lisp
     (use-package origami
       :ensure t
       :config
       (progn
         (global-origami-mode)
         )
       )
   #+END_SRC
* Navigation
** Ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("Latex" (or (name . "^.*tex$") (name . "^.*bib$")  ))
                 ("Programming" (or (or (mode . c-mode) (mode . c++-mode) ) (mode . python-mode) ) )
                 ("Org" (mode . org-mode))
                 (".pdf" (name . "^.*pdf$"))
                 ("Dired" (mode . dired-mode))
                 ("Emacs" (or (name . "^\\*scratch\\*$") (name . "^\\*Messages\\*$") (name . "^\\*Warnings\\*$")))
                 ("Common" (name . "^\\*.*\\*$"))
                 ))))
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "default")))
#+END_SRC
** Dired
#+BEGIN_SRC emacs-lisp
  (put 'dired-find-alternate-file 'disabled nil)
  (eval-after-load "dired" '(progn (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)))
  (setq dired-dwim-target t)

#+END_SRC

** Try
#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
#+END_SRC

** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode))
#+END_SRC

** counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    ("M-y" . counsel-yank-pop)
    :config
    (progn
      (setq counsel-find-file-ignore-regexp "\\.elc\\'")
      (setq counsel-find-file-at-point t)
	   )
    )

#+END_SRC

** swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq enable-recursive-minibuffers nil)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-find-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c g") 'counsel-git)
      (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
      ))
#+END_SRC

** avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("C-:" . avy-goto-char)
    :bind ("M-g g" . avy-goto-line )
    )
#+END_SRC

** iedit-mode
#+BEGIN_SRC emacs-lisp
  (use-package iedit
    :ensure t
    :config (define-key global-map (kbd "C-c ;") 'iedit-mode))
#+END_SRC

** Yasnippets
#+BEGIN_SRC emacs-lisp
 (use-package yasnippet
    :ensure t
    :config (yas-global-mode 1))
 (use-package yasnippet-snippets
    :ensure t)
#+END_SRC

** projectile
   #+BEGIN_SRC emacs-lisp
          (use-package projectile
              :ensure t
              :config
              (progn (projectile-mode)
                     (setq projectile-indexing-method 'native)
                     ))

          (use-package counsel-projectile
            :ensure t
            :config
            (counsel-projectile-mode)
            (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
     )
   #+END_SRC

** helm-ag
   #+BEGIN_SRC emacs-lisp
(use-package helm-ag
    :ensure t
    :config
    (progn
           ))
   #+END_SRC

** ag
   #+BEGIN_SRC emacs-lisp
     (use-package ag
         :ensure t
         :config
         (progn
           )
         )
   #+END_SRC
* Planning / Org-Mode
** org-bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (custom-set-variables '(org-hide-leading-stars t))
#+END_SRC
#+BEGIN_SRC emacs-lisp
    (setq org-ellipsis "⤵") ;⤵ ⭍ ↲ ⮯
    (setq org-src-fontify-natively t)
    (setq org-src-tab-acts-natively t)
    (setq org-src-window-setup 'current-window)

  (setq my-org-folder '~/Dropbox/AccDoc/Org)



#+END_SRC

* Reading
** pdf-tools
   #+BEGIN_SRC emacs-lisp
     (use-package pdf-tools
         :ensure t
         :config
         (progn (pdf-tools-install)
                ))
   #+END_SRC
** engine-mode
   #+BEGIN_SRC emacs-lisp
     (use-package engine-mode
         :ensure t
         :config
         (progn
           (defengine duckduckgo
             "https://duckduckgo.com/?q=%s"
             :keybinding "d")
           (defengine wikipedia
       "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
       :keybinding "w")
           (defengine stack-overflow
             "https://stackoverflow.com/search?q=%s"
             :keybinding "s")
           (defengine github
             "https://github.com/search?ref=simplesearch&q=%s"
             :keybinding "g")

           (defengine youtube
       "https://www.youtube.com/results?search_query=%s")
           (engine-mode t)
           )
         )
   #+END_SRC
* Programming
** Org-babel c++
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages '((C . t)))
#+END_SRC

** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (progn
      (global-magit-file-mode 0)
      (set-default 'magit-stage-all-confirm nil)
      (add-hook 'magit-mode-hook 'magit-load-config-extensions)
      (global-unset-key (kbd "C-x g"))
      (global-set-key (kbd "C-x g h") 'magit-log)
      (global-set-key (kbd "C-x g f") 'magit-file-log)
      (global-set-key (kbd "C-x g b") 'magit-blame-mode)
      (global-set-key (kbd "C-x g m") 'magit-branch-manager)
      (global-set-key (kbd "C-x g c") 'magit-branch)
      (global-set-key (kbd "C-x g s") 'magit-status)
      (global-set-key (kbd "C-x g r") 'magit-reflog)
      (global-set-key (kbd "C-x g t") 'magit-tag)
      (setq user-full-name "Rafael Accácio Nogueira")
      (setq user-mail-address "raccacio@poli.ufrj.br")
      ))

#+END_SRC

** google-c-style flymake
#+BEGIN_SRC emacs-lisp
    ;; (use-package flymake-cursor
    ;;   :ensure t)


  (defun my:flymake-google-init ()
    (require 'flymake-google-cpplint)
    (custom-set-variables
     '(flymake-google-cpplint-command
       (if (string=  window-system "w32")
	   '"d:/Users/Accacio/AppData/Local/Programs/Python/Python36-32/Scripts/cpplint.exe"
	 '"/usr/local/bin/cpplint"
	 )
       )
     )
    (flymake-google-cpplint-load)
    ;; (flymake-cursor-mode 1)
    )

    (use-package flymake-google-cpplint
      :ensure t
      :config
      (progn
	(add-hook 'c-mode-hook 'my:flymake-google-init)
	(add-hook 'c++-mode-hook 'my:flymake-google-init)
	))

    (use-package google-c-style
      :ensure t
      :config
      (progn
	(add-hook 'c-mode-common-hook 'google-set-c-style)
	(add-hook 'c-mode-common-hook 'google-make-newline-indent)
	))

#+END_SRC

** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :config
    (progn
                                          ;    (add-hook 'after-init-hook #'global-flycheck-mode)
      (add-hook 'prog-mode-hook 'flycheck-mode)
      ))
#+END_SRC

** company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (progn
      (add-hook 'after-init-hook 'global-company-mode)
      (setq company-idle-delay 0)
      )
    )

  (use-package company-quickhelp
  :ensure t
  :config
  (progn
    (setq company-minimum-prefix-length 1)
                                          ;    (setq company-tooltip-maximum-width 20)
    (company-quickhelp-mode)
    ))

#+END_SRC
 workaround fci incompability

#+BEGIN_SRC emacs-lisp


(defvar-local company-fci-mode-on-p nil)

(defun company-turn-off-fci (&rest ignore)
  (when (boundp 'fci-mode)
    (setq company-fci-mode-on-p fci-mode)
    (when fci-mode (fci-mode -1))))

(defun company-maybe-turn-on-fci (&rest ignore)
  (when company-fci-mode-on-p (fci-mode 1)))

(add-hook 'company-completion-started-hook 'company-turn-off-fci)
(add-hook 'company-completion-finished-hook 'company-maybe-turn-on-fci)
(add-hook 'company-completion-cancelled-hook 'company-maybe-turn-on-fci)

#+END_SRC

** irony-mode
#+BEGIN_SRC emacs-lisp
      (use-package irony
        :ensure t
        :config
        (progn
          (add-hook 'c++-mode-hook 'irony-mode)
          (add-hook 'c-mode-hook 'irony-mode)
          (add-hook 'objc-mode-hook 'irony-mode)

          (add-hook 'c++-mode-hook 'company-mode)
          (add-hook 'c-mode-hook 'company-mode)
          (add-hook 'objc-mode-hook 'company-mode)

          (add-hook 'after-init-hook 'global-company-mode)


          (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)



          ))

      (use-package company-irony
        :ensure t
        :config
      (eval-after-load 'company
            '(add-to-list 'company-backends '(company-irony))))

      (use-package flycheck-irony
        :ensure t
        :config
        (eval-after-load 'flycheck
          '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup)))


      ;; Windows performance tweaks
      ;;
      (when (boundp 'w32-pipe-read-delay)
        (setq w32-pipe-read-delay 0))
      ;; Set the buffer (setq )ize to 64K on Windows (from the original 4K)
      (when (boundp 'w32-pipe-buffer-size)
        (setq irony-server-w32-pipe-buffer-size (* 64 1024)))


  (use-package company-irony-c-headers
    :ensure t
    :config (eval-after-load 'company
              '(add-to-list
                'company-backends
                '(company-irony-c-headers
                  company-irony
                                          ;company-yasnippet
                  ))))

  (use-package irony-eldoc
    :ensure t
    :config
    (add-hook 'irony-mode-hook 'irony-eldoc))
#+END_SRC

** idle-highlights
#+BEGIN_SRC emacs-lisp
  (use-package idle-highlight-mode
    :ensure t
    :config
    (progn  (add-hook 'prog-mode-hook (lambda () (idle-highlight-mode t)))
            (set-face-background 'idle-highlight "#484a56")
            ))
#+END_SRC

** fill-column-indicator
#+BEGIN_SRC emacs-lisp
  (use-package fill-column-indicator
    :ensure t
    :config
    (progn (setq-default fill-column 70)
           (add-hook 'prog-mode-hook (lambda () (fci-mode t)))
           ))


#+END_SRC

** cmake-mode
  #+BEGIN_SRC emacs-lisp
(use-package cmake-mode
    :ensure t
    :config
    (progn (setq auto-mode-alist
      (append
       '(("CMakeLists\\.txt\\'" . cmake-mode))
       '(("\\.cmake\\'" . cmake-mode))
       auto-mode-alist))

(autoload 'cmake-mode "~/.emacs.d/elpa/cmake-mode-20180104.1137/cmake-mode-autoloads.el" t)
           ))
  #+END_SRC

** helm-gtags
  #+BEGIN_SRC emacs-lisp
    (use-package helm-gtags
      :ensure t
      :config
      (progn (add-hook 'c++-mode-hook 'helm-gtags-mode)
             (add-hook 'c-mode-hook 'helm-gtags-mode)
             (global-set-key (kbd "C-.") 'helm-gtags-dwim)
             ))
  #+END_SRC

** multipcursors
  #+BEGIN_SRC emacs-lisp
    (use-package multiple-cursors
        :ensure t
        :init
        (progn (global-set-key (kbd "C-x <down>") 'mc/mark-next-like-this)
               (global-set-key (kbd "C-x M-RET") 'mc/mark-all-dwim)
               (global-set-key (kbd "C-x <up>") 'mc/mark-previous-like-this)
               ))
  #+END_SRC

** ace-mc
   #+BEGIN_SRC emacs-lisp
     (use-package ace-mc
         :ensure t
         :config
         (progn (global-set-key (kbd "C-0") 'ace-mc-add-multiple-cursors)
                ))
   #+END_SRC
** expand-region
  #+BEGIN_SRC emacs-lisp
    (use-package expand-region
        :ensure t
        :init
        (progn (global-set-key (kbd "C-=") 'er/expand-region)
               ))
  #+END_SRC
* HTML
** rainbow-mode
  #+BEGIN_SRC emacs-lisp
    (use-package rainbow-mode
        :ensure t
        :config
        (progn (add-hook 'html-mode-hook 'rainbow-mode)
               (add-hook 'css-mode-hook 'rainbow-mode)
               ))
  #+END_SRC

** browser
  #+BEGIN_SRC emacs-lisp
    (setq browse-url-browser-function 'browse-url-generic
          browse-url-generic-program "vivaldi")
  #+END_SRC
* Games
** 2048
   #+BEGIN_SRC emacs-lisp
     (use-package 2048-game
       :ensure t
         )
   #+END_SRC

* Finances
** ledger-mode
   #+BEGIN_SRC emacs-lisp
     (use-package ledger-mode
         :ensure t
         :init
         (setq ledger-clear-whole-transactions 1)
         :config
         (progn (add-to-list 'auto-mode-alist '("\\.ledger$" . ledger-mode))
                )
         )
   #+END_SRC

* Ahk
** xahk-mode
   #+BEGIN_SRC emacs-lisp
(use-package xahk-mode
  :ensure t
  :config
  (progn
	 )
  )
   #+END_SRC
* Latex
** auctex
#+BEGIN_SRC emacs-lisp
;; (require 'auctex)
     (use-package auctex
     :defer t
     :ensure t)
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq TeX-save-query nil)
(defun turn-on-outline-minor-mode ()
(outline-minor-mode 1))

(add-hook 'LaTeX-mode-hook 'turn-on-outline-minor-mode)
(add-hook 'latex-mode-hook 'turn-on-outline-minor-mode)
(setq outline-minor-mode-prefix "\C-c \C-o") ; Or something else
;(setq TeX-PDF-mode t)

(use-package company-auctex
    :ensure t
    :config
    (progn
           ))
(company-auctex-init)

#+END_SRC
** company-bibtex
#+BEGIN_SRC emacs-lisp
(use-package company-bibtex
    :ensure t
    :config
    (progn
           ))

#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package company-reftex
      :ensure t
      :config
      (progn
             ))
  '(reftex-use-external-file-finders t)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
  (add-hook 'latex-mode-hook 'turn-on-reftex)   ; with Emacs latex mode
  (add-hook 'LaTeX-mode-hook 'auto-fill-mode)
  (add-hook 'latex-mode-hook 'auto-fill-mode)
#+END_SRC

* Blog
#+BEGIN_SRC emacs-lisp
  (setq org-publish-project-alist
	'(

    ("org-accacio"
	    ;; Path to your org files.
	    :base-directory "~/site/org/"
	    :base-extension "org"

	    ;; Path to your Jekyll project.
	    :publishing-directory "~/site/meublog/"
	    :recursive t
	    :publishing-function org-html-publish-to-html
	    :headline-levels 4
	    :html-extension "html"
	    :body-only t ;; Only export section between <body> </body>
      )


      ("org-static-acc"
	    :base-directory "~/site/org/"
	    :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|php"
	    :publishing-directory "~/site/"
	    :recursive t
	    :publishing-function org-publish-attachment)

      ("acc" :components ("org-accacio" "org-static-acc"))

  ))


#+END_SRC

* writing
** markdown-mode
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+END_SRC

** ispell
#+BEGIN_SRC emacs-lisp
  (let ((langs '("american" "fr-80" "pt_BR")))
        (setq lang-ring (make-ring (length langs)))
        (dolist (elem langs) (ring-insert lang-ring elem)))

    (defun cycle-ispell-languages ()
        (interactive)
        (let ((lang (ring-ref lang-ring -1)))
          (ring-insert lang-ring lang)
          (ispell-change-dictionary lang)))



  (global-set-key [f6] 'cycle-ispell-languages)
#+END_SRC

* Feeds
** Elfeed
   #+BEGIN_SRC emacs-lisp
     (use-package elfeed
       :ensure t
       :config
       (progn (setq elfeed-feeds
           '(
             "https://www.youtube.com/feeds/videos.xml?channel_id=UCtiPaN6Zj0-4CeC7p1qUOcg"
             "https://www.youtube.com/feeds/videos.xml?channel_id=UC0JB7TSe49lg56u6qH8y_MQ"
             )
           )
              )
       )
   #+END_SRC
